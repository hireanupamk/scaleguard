name: Deploy to Salesforce on main

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy force-app to Salesforce
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node (for installing Salesforce CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Salesforce CLI via npm
        run: |
          # install the legacy sfdx CLI (provides sfdx force:* commands)
          npm install -g sfdx-cli

      - name: Authenticate using SFDX_AUTH_URL secret
        env:
          SFDX_AUTH_URL: ${{ secrets.SFDX_AUTH_URL }}
        run: |
          if [ -z "$SFDX_AUTH_URL" ]; then
            echo "SFDX_AUTH_URL secret is not set. Exiting.";
            exit 1;
          fi
          echo "$SFDX_AUTH_URL" > sfdxAuth.txt
          sfdx auth:sfdxurl:store -f sfdxAuth.txt -a targetOrg

      - name: Deploy source to targetOrg (sfdx fallback -> sf)
        run: |
          set -e
          echo "Checking for sfdx or sf CLI..."
          if command -v sfdx >/dev/null 2>&1; then
            echo "Using sfdx to deploy"
            sfdx force:source:deploy -p force-app -u targetOrg -w 20 -l RunLocalTests
            exit_code=$?
            echo "sfdx exit code: $exit_code"
            if [ $exit_code -ne 0 ]; then
              echo "sfdx deploy failed"
              exit $exit_code
            fi
          elif command -v sf >/dev/null 2>&1; then
            echo "Using sf to deploy"
            # Use sf project deploy start for source-format deployments
            sf project deploy start -p force-app -u targetOrg --test-level RunLocalTests --wait 20
            exit_code=$?
            echo "sf exit code: $exit_code"
            if [ $exit_code -ne 0 ]; then
              echo "sf deploy failed"
              exit $exit_code
            fi
          else
            echo "Neither sfdx nor sf CLI is available on the runner."
            exit 127
          fi

      - name: Show deployment status (if sf used)
        run: |
          # Print deployment status (best-effort). Support both sf and sfdx reporting.
          if command -v sf >/dev/null 2>&1; then
            echo "Listing recent sf deployments"
            sf project deploy report --json || true
          elif command -v sfdx >/dev/null 2>&1; then
            echo "sfdx is available; no separate deploy report for source-format deployments (deploy waited earlier)."
            # For mdapi deployments you'd run: sfdx force:mdapi:deploy:report -i <jobId>
          else
            echo "Neither sf nor sfdx is available; cannot show deployment report"
            exit 0
          fi
